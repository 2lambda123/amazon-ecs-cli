// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/aws-sdk-go/service/secretsmanager/secretsmanageriface (interfaces: SecretsManagerAPI)

package mock_secretsmanageriface

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	secretsmanager "github.com/aws/aws-sdk-go/service/secretsmanager"
	gomock "github.com/golang/mock/gomock"
)

// Mock of SecretsManagerAPI interface
type MockSecretsManagerAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockSecretsManagerAPIRecorder
}

// Recorder for MockSecretsManagerAPI (not exported)
type _MockSecretsManagerAPIRecorder struct {
	mock *MockSecretsManagerAPI
}

func NewMockSecretsManagerAPI(ctrl *gomock.Controller) *MockSecretsManagerAPI {
	mock := &MockSecretsManagerAPI{ctrl: ctrl}
	mock.recorder = &_MockSecretsManagerAPIRecorder{mock}
	return mock
}

func (_m *MockSecretsManagerAPI) EXPECT() *_MockSecretsManagerAPIRecorder {
	return _m.recorder
}

func (_m *MockSecretsManagerAPI) CancelRotateSecret(_param0 *secretsmanager.CancelRotateSecretInput) (*secretsmanager.CancelRotateSecretOutput, error) {
	ret := _m.ctrl.Call(_m, "CancelRotateSecret", _param0)
	ret0, _ := ret[0].(*secretsmanager.CancelRotateSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) CancelRotateSecret(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelRotateSecret", arg0)
}

func (_m *MockSecretsManagerAPI) CancelRotateSecretRequest(_param0 *secretsmanager.CancelRotateSecretInput) (*request.Request, *secretsmanager.CancelRotateSecretOutput) {
	ret := _m.ctrl.Call(_m, "CancelRotateSecretRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.CancelRotateSecretOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) CancelRotateSecretRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelRotateSecretRequest", arg0)
}

func (_m *MockSecretsManagerAPI) CancelRotateSecretWithContext(_param0 aws.Context, _param1 *secretsmanager.CancelRotateSecretInput, _param2 ...request.Option) (*secretsmanager.CancelRotateSecretOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CancelRotateSecretWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.CancelRotateSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) CancelRotateSecretWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelRotateSecretWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) CreateSecret(_param0 *secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateSecret", _param0)
	ret0, _ := ret[0].(*secretsmanager.CreateSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) CreateSecret(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSecret", arg0)
}

func (_m *MockSecretsManagerAPI) CreateSecretRequest(_param0 *secretsmanager.CreateSecretInput) (*request.Request, *secretsmanager.CreateSecretOutput) {
	ret := _m.ctrl.Call(_m, "CreateSecretRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.CreateSecretOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) CreateSecretRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSecretRequest", arg0)
}

func (_m *MockSecretsManagerAPI) CreateSecretWithContext(_param0 aws.Context, _param1 *secretsmanager.CreateSecretInput, _param2 ...request.Option) (*secretsmanager.CreateSecretOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateSecretWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.CreateSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) CreateSecretWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSecretWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) DeleteResourcePolicy(_param0 *secretsmanager.DeleteResourcePolicyInput) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteResourcePolicy", _param0)
	ret0, _ := ret[0].(*secretsmanager.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) DeleteResourcePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteResourcePolicy", arg0)
}

func (_m *MockSecretsManagerAPI) DeleteResourcePolicyRequest(_param0 *secretsmanager.DeleteResourcePolicyInput) (*request.Request, *secretsmanager.DeleteResourcePolicyOutput) {
	ret := _m.ctrl.Call(_m, "DeleteResourcePolicyRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.DeleteResourcePolicyOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) DeleteResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteResourcePolicyRequest", arg0)
}

func (_m *MockSecretsManagerAPI) DeleteResourcePolicyWithContext(_param0 aws.Context, _param1 *secretsmanager.DeleteResourcePolicyInput, _param2 ...request.Option) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteResourcePolicyWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) DeleteResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteResourcePolicyWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) DeleteSecret(_param0 *secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteSecret", _param0)
	ret0, _ := ret[0].(*secretsmanager.DeleteSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) DeleteSecret(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSecret", arg0)
}

func (_m *MockSecretsManagerAPI) DeleteSecretRequest(_param0 *secretsmanager.DeleteSecretInput) (*request.Request, *secretsmanager.DeleteSecretOutput) {
	ret := _m.ctrl.Call(_m, "DeleteSecretRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.DeleteSecretOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) DeleteSecretRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSecretRequest", arg0)
}

func (_m *MockSecretsManagerAPI) DeleteSecretWithContext(_param0 aws.Context, _param1 *secretsmanager.DeleteSecretInput, _param2 ...request.Option) (*secretsmanager.DeleteSecretOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteSecretWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.DeleteSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) DeleteSecretWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSecretWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) DescribeSecret(_param0 *secretsmanager.DescribeSecretInput) (*secretsmanager.DescribeSecretOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeSecret", _param0)
	ret0, _ := ret[0].(*secretsmanager.DescribeSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) DescribeSecret(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSecret", arg0)
}

func (_m *MockSecretsManagerAPI) DescribeSecretRequest(_param0 *secretsmanager.DescribeSecretInput) (*request.Request, *secretsmanager.DescribeSecretOutput) {
	ret := _m.ctrl.Call(_m, "DescribeSecretRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.DescribeSecretOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) DescribeSecretRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSecretRequest", arg0)
}

func (_m *MockSecretsManagerAPI) DescribeSecretWithContext(_param0 aws.Context, _param1 *secretsmanager.DescribeSecretInput, _param2 ...request.Option) (*secretsmanager.DescribeSecretOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeSecretWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.DescribeSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) DescribeSecretWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSecretWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) GetRandomPassword(_param0 *secretsmanager.GetRandomPasswordInput) (*secretsmanager.GetRandomPasswordOutput, error) {
	ret := _m.ctrl.Call(_m, "GetRandomPassword", _param0)
	ret0, _ := ret[0].(*secretsmanager.GetRandomPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) GetRandomPassword(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRandomPassword", arg0)
}

func (_m *MockSecretsManagerAPI) GetRandomPasswordRequest(_param0 *secretsmanager.GetRandomPasswordInput) (*request.Request, *secretsmanager.GetRandomPasswordOutput) {
	ret := _m.ctrl.Call(_m, "GetRandomPasswordRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.GetRandomPasswordOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) GetRandomPasswordRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRandomPasswordRequest", arg0)
}

func (_m *MockSecretsManagerAPI) GetRandomPasswordWithContext(_param0 aws.Context, _param1 *secretsmanager.GetRandomPasswordInput, _param2 ...request.Option) (*secretsmanager.GetRandomPasswordOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetRandomPasswordWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.GetRandomPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) GetRandomPasswordWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRandomPasswordWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) GetResourcePolicy(_param0 *secretsmanager.GetResourcePolicyInput) (*secretsmanager.GetResourcePolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "GetResourcePolicy", _param0)
	ret0, _ := ret[0].(*secretsmanager.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) GetResourcePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetResourcePolicy", arg0)
}

func (_m *MockSecretsManagerAPI) GetResourcePolicyRequest(_param0 *secretsmanager.GetResourcePolicyInput) (*request.Request, *secretsmanager.GetResourcePolicyOutput) {
	ret := _m.ctrl.Call(_m, "GetResourcePolicyRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.GetResourcePolicyOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) GetResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetResourcePolicyRequest", arg0)
}

func (_m *MockSecretsManagerAPI) GetResourcePolicyWithContext(_param0 aws.Context, _param1 *secretsmanager.GetResourcePolicyInput, _param2 ...request.Option) (*secretsmanager.GetResourcePolicyOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetResourcePolicyWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) GetResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetResourcePolicyWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) GetSecretValue(_param0 *secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error) {
	ret := _m.ctrl.Call(_m, "GetSecretValue", _param0)
	ret0, _ := ret[0].(*secretsmanager.GetSecretValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) GetSecretValue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSecretValue", arg0)
}

func (_m *MockSecretsManagerAPI) GetSecretValueRequest(_param0 *secretsmanager.GetSecretValueInput) (*request.Request, *secretsmanager.GetSecretValueOutput) {
	ret := _m.ctrl.Call(_m, "GetSecretValueRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.GetSecretValueOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) GetSecretValueRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSecretValueRequest", arg0)
}

func (_m *MockSecretsManagerAPI) GetSecretValueWithContext(_param0 aws.Context, _param1 *secretsmanager.GetSecretValueInput, _param2 ...request.Option) (*secretsmanager.GetSecretValueOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetSecretValueWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.GetSecretValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) GetSecretValueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSecretValueWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) ListSecretVersionIds(_param0 *secretsmanager.ListSecretVersionIdsInput) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListSecretVersionIds", _param0)
	ret0, _ := ret[0].(*secretsmanager.ListSecretVersionIdsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) ListSecretVersionIds(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSecretVersionIds", arg0)
}

func (_m *MockSecretsManagerAPI) ListSecretVersionIdsPages(_param0 *secretsmanager.ListSecretVersionIdsInput, _param1 func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListSecretVersionIdsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSecretsManagerAPIRecorder) ListSecretVersionIdsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSecretVersionIdsPages", arg0, arg1)
}

func (_m *MockSecretsManagerAPI) ListSecretVersionIdsPagesWithContext(_param0 aws.Context, _param1 *secretsmanager.ListSecretVersionIdsInput, _param2 func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool, _param3 ...request.Option) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListSecretVersionIdsPagesWithContext", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSecretsManagerAPIRecorder) ListSecretVersionIdsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSecretVersionIdsPagesWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) ListSecretVersionIdsRequest(_param0 *secretsmanager.ListSecretVersionIdsInput) (*request.Request, *secretsmanager.ListSecretVersionIdsOutput) {
	ret := _m.ctrl.Call(_m, "ListSecretVersionIdsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.ListSecretVersionIdsOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) ListSecretVersionIdsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSecretVersionIdsRequest", arg0)
}

func (_m *MockSecretsManagerAPI) ListSecretVersionIdsWithContext(_param0 aws.Context, _param1 *secretsmanager.ListSecretVersionIdsInput, _param2 ...request.Option) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListSecretVersionIdsWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.ListSecretVersionIdsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) ListSecretVersionIdsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSecretVersionIdsWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) ListSecrets(_param0 *secretsmanager.ListSecretsInput) (*secretsmanager.ListSecretsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListSecrets", _param0)
	ret0, _ := ret[0].(*secretsmanager.ListSecretsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) ListSecrets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSecrets", arg0)
}

func (_m *MockSecretsManagerAPI) ListSecretsPages(_param0 *secretsmanager.ListSecretsInput, _param1 func(*secretsmanager.ListSecretsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListSecretsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSecretsManagerAPIRecorder) ListSecretsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSecretsPages", arg0, arg1)
}

func (_m *MockSecretsManagerAPI) ListSecretsPagesWithContext(_param0 aws.Context, _param1 *secretsmanager.ListSecretsInput, _param2 func(*secretsmanager.ListSecretsOutput, bool) bool, _param3 ...request.Option) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListSecretsPagesWithContext", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSecretsManagerAPIRecorder) ListSecretsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSecretsPagesWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) ListSecretsRequest(_param0 *secretsmanager.ListSecretsInput) (*request.Request, *secretsmanager.ListSecretsOutput) {
	ret := _m.ctrl.Call(_m, "ListSecretsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.ListSecretsOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) ListSecretsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSecretsRequest", arg0)
}

func (_m *MockSecretsManagerAPI) ListSecretsWithContext(_param0 aws.Context, _param1 *secretsmanager.ListSecretsInput, _param2 ...request.Option) (*secretsmanager.ListSecretsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListSecretsWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.ListSecretsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) ListSecretsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListSecretsWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) PutResourcePolicy(_param0 *secretsmanager.PutResourcePolicyInput) (*secretsmanager.PutResourcePolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "PutResourcePolicy", _param0)
	ret0, _ := ret[0].(*secretsmanager.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) PutResourcePolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutResourcePolicy", arg0)
}

func (_m *MockSecretsManagerAPI) PutResourcePolicyRequest(_param0 *secretsmanager.PutResourcePolicyInput) (*request.Request, *secretsmanager.PutResourcePolicyOutput) {
	ret := _m.ctrl.Call(_m, "PutResourcePolicyRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.PutResourcePolicyOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) PutResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutResourcePolicyRequest", arg0)
}

func (_m *MockSecretsManagerAPI) PutResourcePolicyWithContext(_param0 aws.Context, _param1 *secretsmanager.PutResourcePolicyInput, _param2 ...request.Option) (*secretsmanager.PutResourcePolicyOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PutResourcePolicyWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) PutResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutResourcePolicyWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) PutSecretValue(_param0 *secretsmanager.PutSecretValueInput) (*secretsmanager.PutSecretValueOutput, error) {
	ret := _m.ctrl.Call(_m, "PutSecretValue", _param0)
	ret0, _ := ret[0].(*secretsmanager.PutSecretValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) PutSecretValue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutSecretValue", arg0)
}

func (_m *MockSecretsManagerAPI) PutSecretValueRequest(_param0 *secretsmanager.PutSecretValueInput) (*request.Request, *secretsmanager.PutSecretValueOutput) {
	ret := _m.ctrl.Call(_m, "PutSecretValueRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.PutSecretValueOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) PutSecretValueRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutSecretValueRequest", arg0)
}

func (_m *MockSecretsManagerAPI) PutSecretValueWithContext(_param0 aws.Context, _param1 *secretsmanager.PutSecretValueInput, _param2 ...request.Option) (*secretsmanager.PutSecretValueOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PutSecretValueWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.PutSecretValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) PutSecretValueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutSecretValueWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) RestoreSecret(_param0 *secretsmanager.RestoreSecretInput) (*secretsmanager.RestoreSecretOutput, error) {
	ret := _m.ctrl.Call(_m, "RestoreSecret", _param0)
	ret0, _ := ret[0].(*secretsmanager.RestoreSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) RestoreSecret(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RestoreSecret", arg0)
}

func (_m *MockSecretsManagerAPI) RestoreSecretRequest(_param0 *secretsmanager.RestoreSecretInput) (*request.Request, *secretsmanager.RestoreSecretOutput) {
	ret := _m.ctrl.Call(_m, "RestoreSecretRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.RestoreSecretOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) RestoreSecretRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RestoreSecretRequest", arg0)
}

func (_m *MockSecretsManagerAPI) RestoreSecretWithContext(_param0 aws.Context, _param1 *secretsmanager.RestoreSecretInput, _param2 ...request.Option) (*secretsmanager.RestoreSecretOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RestoreSecretWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.RestoreSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) RestoreSecretWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RestoreSecretWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) RotateSecret(_param0 *secretsmanager.RotateSecretInput) (*secretsmanager.RotateSecretOutput, error) {
	ret := _m.ctrl.Call(_m, "RotateSecret", _param0)
	ret0, _ := ret[0].(*secretsmanager.RotateSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) RotateSecret(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RotateSecret", arg0)
}

func (_m *MockSecretsManagerAPI) RotateSecretRequest(_param0 *secretsmanager.RotateSecretInput) (*request.Request, *secretsmanager.RotateSecretOutput) {
	ret := _m.ctrl.Call(_m, "RotateSecretRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.RotateSecretOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) RotateSecretRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RotateSecretRequest", arg0)
}

func (_m *MockSecretsManagerAPI) RotateSecretWithContext(_param0 aws.Context, _param1 *secretsmanager.RotateSecretInput, _param2 ...request.Option) (*secretsmanager.RotateSecretOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RotateSecretWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.RotateSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) RotateSecretWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RotateSecretWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) TagResource(_param0 *secretsmanager.TagResourceInput) (*secretsmanager.TagResourceOutput, error) {
	ret := _m.ctrl.Call(_m, "TagResource", _param0)
	ret0, _ := ret[0].(*secretsmanager.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) TagResource(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TagResource", arg0)
}

func (_m *MockSecretsManagerAPI) TagResourceRequest(_param0 *secretsmanager.TagResourceInput) (*request.Request, *secretsmanager.TagResourceOutput) {
	ret := _m.ctrl.Call(_m, "TagResourceRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.TagResourceOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TagResourceRequest", arg0)
}

func (_m *MockSecretsManagerAPI) TagResourceWithContext(_param0 aws.Context, _param1 *secretsmanager.TagResourceInput, _param2 ...request.Option) (*secretsmanager.TagResourceOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TagResourceWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TagResourceWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) UntagResource(_param0 *secretsmanager.UntagResourceInput) (*secretsmanager.UntagResourceOutput, error) {
	ret := _m.ctrl.Call(_m, "UntagResource", _param0)
	ret0, _ := ret[0].(*secretsmanager.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UntagResource", arg0)
}

func (_m *MockSecretsManagerAPI) UntagResourceRequest(_param0 *secretsmanager.UntagResourceInput) (*request.Request, *secretsmanager.UntagResourceOutput) {
	ret := _m.ctrl.Call(_m, "UntagResourceRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.UntagResourceOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UntagResourceRequest", arg0)
}

func (_m *MockSecretsManagerAPI) UntagResourceWithContext(_param0 aws.Context, _param1 *secretsmanager.UntagResourceInput, _param2 ...request.Option) (*secretsmanager.UntagResourceOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UntagResourceWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UntagResourceWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) UpdateSecret(_param0 *secretsmanager.UpdateSecretInput) (*secretsmanager.UpdateSecretOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateSecret", _param0)
	ret0, _ := ret[0].(*secretsmanager.UpdateSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) UpdateSecret(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSecret", arg0)
}

func (_m *MockSecretsManagerAPI) UpdateSecretRequest(_param0 *secretsmanager.UpdateSecretInput) (*request.Request, *secretsmanager.UpdateSecretOutput) {
	ret := _m.ctrl.Call(_m, "UpdateSecretRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.UpdateSecretOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) UpdateSecretRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSecretRequest", arg0)
}

func (_m *MockSecretsManagerAPI) UpdateSecretVersionStage(_param0 *secretsmanager.UpdateSecretVersionStageInput) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateSecretVersionStage", _param0)
	ret0, _ := ret[0].(*secretsmanager.UpdateSecretVersionStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) UpdateSecretVersionStage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSecretVersionStage", arg0)
}

func (_m *MockSecretsManagerAPI) UpdateSecretVersionStageRequest(_param0 *secretsmanager.UpdateSecretVersionStageInput) (*request.Request, *secretsmanager.UpdateSecretVersionStageOutput) {
	ret := _m.ctrl.Call(_m, "UpdateSecretVersionStageRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*secretsmanager.UpdateSecretVersionStageOutput)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) UpdateSecretVersionStageRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSecretVersionStageRequest", arg0)
}

func (_m *MockSecretsManagerAPI) UpdateSecretVersionStageWithContext(_param0 aws.Context, _param1 *secretsmanager.UpdateSecretVersionStageInput, _param2 ...request.Option) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateSecretVersionStageWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.UpdateSecretVersionStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) UpdateSecretVersionStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSecretVersionStageWithContext", _s...)
}

func (_m *MockSecretsManagerAPI) UpdateSecretWithContext(_param0 aws.Context, _param1 *secretsmanager.UpdateSecretInput, _param2 ...request.Option) (*secretsmanager.UpdateSecretOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateSecretWithContext", _s...)
	ret0, _ := ret[0].(*secretsmanager.UpdateSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSecretsManagerAPIRecorder) UpdateSecretWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSecretWithContext", _s...)
}
